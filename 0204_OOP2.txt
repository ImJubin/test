상속
한 클래스(부모)의 속성과 메서드를 다른 클래스(자식)가 물려받는 것.

상속이 필요한 이유
1. 코드 재사용
상속을 통해 기존 클래스의 속성과 메서드를 재사용할 수 있음
기존 클래스를 수정하지 않고도 기능을 확장할 수 있음

2. 계층 구조
상속을 통해 클래스들 간의 계층 구조를 형성할 수 있음
부모 클래스와 자식 클래스 간의 관계를 표현하고,
더 구체적인 클래스를 만들 수 있음

3. 유지 보수의 용이성
상속을 통해 기존 클래스의 수정이 필요한 경우, 해당 클래스만 수정하면 되므로 유지 보수가 용이해짐
코드의 일관성을 유지하고, 수정이 필요한 범위를 최소화할 수 있음

 *클래스는 객체가 반드시 필요한 게 아님. 클래스 함수의 개념을 가지고 쓰기 때문.

 *클래스 설계는 규모만 생각하지 말고, 유지 보수기간 또한 고려해야 함. 
클래스가 아닌 객체를 클래스로 바꾸기도 하기 때문



상속 예시(1/2)

클래스
속성
메서드

상속 예시(2/2)
상속 없이 구현 하는 경우 (1/2)

* 메서드 오버라이딩
(중요, 오버로딩과 구분하기. 
같은 함수를 여러개 정의 하는 것.
A(a) / A(a, b)를 서로 다른 함수로 보는 것. 
하나의 함수를 가지고 인자의 수에 따라 여러개 함수를 정의 하는 것.
타입으로도 구분함.)
* 오버로딩은 파이선에서 지원하지 않음.

메서드 오버라이딩이란?
부모 클래스의 메서드를 같은 이름, 같은 파라미터 구조로 재정의
(오버라이딩,,오버라이팅->덮어씌움)

메서드 오버라이딩 예시
자식 클래스가 부모 클래스의 메서드를 덮어써 새로운 동작 구현할 수 있음


다중상속
둘 이상의 상위 클래스로부터 여러 행동이나 특징을 상속받을 수 있는 것
상속 받는 모든 클래스의 요소를 활용 가능함
중복된 속성이나 메서드가 있는 경우 *상속 순서에 의해 결정*

다이아몬드 문제
두 클래스 B와 C가 A에서 상속되고, 클래스 D가 B와 C 모두에서 상속될 때 발생하는 모호함

파이썬해결책
MRO(Method Resoulution Order)알고리즘 사용, 클래스 목록 생성
부모 클래스로부터 상속된 속성들의 깊이 우선, 왼쪽에서 오른쪽, 계층 구조에서 겹치는 같은 클래스를 두 번 검색하지 않음

그래서 속성이  D에서 못찾으면 B에서, 못찾으면 C에서, 이런식으로 찾음

MRO(Method Resoulution Order)
파이썬이 메서드를 찾는 순서에 대한 규칙. 메서드 결정 순서

Super()
부모 클래스(또는 상위 클래스)의 메서드를 호출하기 위해 사용하는 내장함수

Super()기능
다중 상속 상황에서 특히 유용, MRO 따르기 때문에 여러 부모 클래스를 가진 자식 클래스에서 다음에 호출해야 할 부모 메서드를 순서대로 호출할 수 있게 함

super의 2 가지 사용 사례

1. 단일 상속 구조
• 명시적으로 이름을 지정하지 않고 부모 클래스를 참조할 수 있으므로,
코드를 더 유지 관리하기 쉽게 만들 수 있음
• 클래스 이름이 변경되거나 부모 클래스가 교체되어도 super()를 사용하면
코드 수정이 더 적게 필요

2. 다중 상속 구조
• MRO를 따른 메서드 호출
• 복잡한 다중 상속 구조에서 발생할 수 있는 문제를 방지


super() 사용 예시 (단일 상속) 

- 명시적으로 부모 클래스 이름 적지 않아도 부모 메서드를 안전히 호출 할 수 있음.

• Student의 생성자에서 super() .__ init __ ()를 호출하면, Person의 __ init __ ()
메서드가 호출되어 name, age, number, email 속성을 초기화한 뒤 Student 고유의
student_id 속성을 추가

• 이때 Person 클래스를 직접 명시하지 않고 super()를 사용하므로, 나중에 클래스 이
름이 바뀌거나 상속 구조가 변경되어도 super() 호출 부분을 그대로 사용할 수 있어
유지보수성이 향상


super() 사용 예시 (다중 상속) 

1. Child 클래스는 ParentA, ParentB를 순서대로 상속

2. child = Child()를 실행하면 Child의 init 메서드에서 super() .__ init __ ()를 호출

3. MRO에 의해 Child → ParentA → ParentB 순으로 메서드를 찾는데, 이 상황에서
super() .__ init __ ()는 바로 다음 순서에 해당하는 ParentA의 init을 호출

4. ParentA의 init이 실행되어 value_a가 초기화.
ParentB의 init은 이 예제에서는 자동으로 호출되지 않음
• 만약 ParentA의 init 안에서도 super() .__ init __ ()를 호출한다면,
그 다음으로 ParentB의 init이 실행되어 value_b도 초기화할 수 있음
이렇게 여러 부모 클래스의 초기화가 순서대로 이루어질 수 있음

5. child.show_value()를 호출하면 Child의 show_value에서
super().show_value()를 호출

6. show_value() 메서드를 찾기 위해 Child → ParentA → ParentB 순서로 탐색
하므로, 첫 번째로 ParentA의 show_value()가 실행됨


super()의 이점

• 다중 상속 상황에서 super()는 다음에 호출해야 할 부모 메서드를 MRO 순서에 따라
결정하기 때문에, 명시적으로 특정 부모 클래스를 가리키지 않고도 올바른 순서로 부
모 초기화나 메서드 호출이 가능

• 이를 통해 복잡한 상속 구조에서도 코드를 유연하고 깔끔하게 유지할 수 있음

super() 정리

• super()를 사용할 때는 MRO를 잘 이해하고 있어야 함

• ClassName .__ mro __ 또는 ClassName.mro()를 확인해 MRO 순서를 파악한 뒤
적절히 활용하는 연습을 하면, 보다 복잡한 상속 구조에서도 코드를 잘 관리할 수 있음

MRO가 필요한 이유
단조적인 구조를 형성함으로써, 예측가능한 구조가 됨.

• 부모 클래스들이 여러 번 액세스 되지 않도록,
각 클래스에서 지정된 왼쪽에서 오른쪽으로 가는 순서를 보존하고,
각 부모를 오직 한 번만 호출하고,
부모들의 우선순위에 영향을 주지 않으면서 서브 클래스를 만드는 단조적인 구조 형성

Confidential

→

▶ 프로그래밍 언어의 신뢰성 있고 확장성 있는 클래스를 설계할 수 있도록 도움

> 클래스 간의 메서드 호출 순서가 예측 가능하게 유지되며,
코드의 재사용성과 유지보수성이 향상


에러와 예외

버그
소프트 웨어에서 발생하는 오류 또는 결함
프로그램의 예상된 동작과 실제 동작  사이 불일치

버그의 기원
1945년, 프로그래밍 언어 코볼 발명사 그레이스 호퍼가 발견 
최초 컴퓨터 버그는 mark2 컴퓨터회로에 나방이 들어간 사건

디버깅
소프트 웨어에서 발생하는 버그를 찾아내고 수정하는 과정
프로그램 오작동 원인을 찾아내 수정함.

디버깅 방법

1. print 함수 활용

2. 개발환경(text editor, IDE) 등에서 제공하는 기능 활용

3. python tutor 활용

에러

문법에러 : 구문 올바르지 않을 때
예외 : 프로그램 실행 중 감지된 에러
프로그램 동작 상 통제가 가능한 에러.

런타임예외 (프로그램 실행 중 발생)
실행이전 발생


내장 예외(Builton Ecxeptions)
예외 상황을 나타내는 예외 클래스들
파이썬에서 이미 정의되어 있으며, 특정 예외 상황에 대한 처리를 위해 사용

예외를 어떻게 처리할 것인가?
(if) try 100<= a 
예외가 발생할 수 있는 코드 작성
예외가 발생할수있는지 안하는지

(elif) except (c언어는 catch)
예외가 발생했을 때 실행할 코드 작성

else 
예외가발생하지 않을 때 실행할 코드 작성

finally
예외 발생 여부와 상관 없이 항상 실행할 코드 작성


try-except 구조
try 블록 안에는 예외가 발생할 수 있는 코드를 작성
except 블록 안에는 예외가 발생했을 때 처리할 코드 작성

복수 예외 처리 연습 (1/4)
100을 사용자가 입력한 값으로 나누고 출력하는 코드를 작성하시오.
먼저, 발생 가능한 에러가 무엇인지 예상


(참고)_AS 키워드
my_list = []

try:
    number = my_list[1]
except IndexError as error:
    # list index out of range가 발생했습니다.
    print(f'{error}가 발생했습니다.')


try-except와 if-else를 함께 사용할 수 있음


EAFP / LBYL 비교하기


0204.























































