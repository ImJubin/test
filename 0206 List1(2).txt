<복습>- 버블정렬

def BubbleSort(a, N) : 	# 정렬할 List, N 원소 수
    for i in range(N-1, 0, -1) : # 범위의 끝 위치
        for j in range(i) :		# 비교할 왼쪽 원소 인덱스 j
            if a[j] > a[j+1] :
                a[j], a[j+1] = a[j+1], a[j] 


과제는 0, 1, ,,, n-m 으로 푼다.



캬운팅 정렬(Counting Sort)

○ 항목들의 순서를 결정하기 위해 집합에 각 항목이 몇 개씩 있는지 세는 작업을 하여,
선형 시간에 정렬하는 효율적인 알고리즘

(*

♡ 제한 사항
• 정수나 정수로 표현할 수 있는 자료에 대해서만 적용 가능 : 각 항목의 발생 회수를
기록하기 위해, 정수 항목으로 인덱스 되는 카운트들의 배열을 사용하기 때문이다.
• 카운트들을 위한 충분한 공간을 할당하려면 집합 내의 가장 큰 정수를 알아야
한다.

Con

C ._ I
LIVE

SAMSUNG
SW
ACADEMY

YOUTH

♡ 시간 복잡도
• O(n + k) : n은 리스트 길이, k는 정수의 최댓값

카운팅 정렬 과정

(1단계)

[0, 4, 1,

for i in range(N) ,, for x in DATA

counts[data[:]] += 1

(2단계)
for i : 1 -> 4
COUNTS[i] += COUNTS[i-1]
COUNTS[i] = COUNTS[i-1] + COUNTS[i] (둘이 같은 말임)

(3단계)
for i    n-1 -> 0
count[DATA[i]] -=1
TEMP[COUNTS[DATA[i]]] = DATA[i]

cf. 완전 정렬
같은 값이 나올 때 원래의 순서를 유지한 상태로 정렬하고자 할 때 사용
같은 값끼리 원래의 순서를 유지하고 있음.
(eg. 좌표쓰기, 1,0 1,1 이렇게)

카운팅 정렬

def Counting_Sort(DATA, TEMP, k):
# DATA [] -- 입력 배열(원소는 0 이상 k이하 정수)
# TEMP [] -- 정렬된 배열.
# COUNTS [] -- 카운트 배열.

COUNTS = [0] * (+1)

for i in range (len(DATA)
COUNTS[DATA[i]] += 1

for i in range
COUNTS[i] += COUNTS[i-1]

for i in range (len(DATA)-1, -1, -1) :
COUNTS[DATA[i]] -= 1
TEMP[COUNTS[DATA[i]]] = DATA[i]

(*인덱스 주의!! 범위가 n+1임
자연스럽게 코드 만들 수 있도록 함.)

---------------------------------------------------------------------------------------------------

문제 풀이 과정

'''
0<=DATA[i]<=4 조건
'''
DATA = [0, 4, 1, 3, 1, 2, 4, 1]

N = len(DATA)
COUNTS = [0] * 5 #max(DATA) + 1 ,왜냐면 0부터 시작하니까. 인덱스가 양의 정수여야 씀. 음수는 굳이?

TEMP = [0] *N                   #정렬 결과 저장

for i in range(N):          # 각 숫자의 개수
    COUNTS[DATA[i]] += 1 #for i in range(N)~ 외워두기! <1단계>

print(COUNTS)

for i in range(1, 5):       # COUNTS[i] 까지의 합계
    COUNTS[i] += COUNTS[i-1]

print(COUNTS)

for i in range(N-1, -1, -1):
    COUNTS[DATA[i]] -= 1 # 데이터i까지의 개수 1개 감소
    #DATA[i]까지 차지한 칸 수 중 가장 오른 쪽에 DATA[i]기록
    TEMP[COUNTS[DATA[i]]] = DATA[i] 
    

print(TEMP)

---------------------------------------------------------------------------------------------------




정렬 알고리즘 비교
(표 참고)

완전검색

베이비진 게임

설명
• 0~9 사이의 숫자 카드에서 임의의 카드 6장을 뽑았을 때, 3장의 카드가
연속적인 번호를 갖는 경우를 run이라 하고, 3장의 카드가 동일한 번호를
갖는 경우를 triplet이라고 한다.

• 그리고, 6장의 카드가 run과 triplet로만 구성된 경우를 baby-gin으로 부른다.

• 6자리의 숫자를 입력 받아 baby-gin 여부를 판단하는 프로그램을 작성하라.

입력 예
• 667767은 두 개의 triplet이므로 baby-gin이다. (666, 777)
• 054060은 한 개의 run과 한 개의 triplet이므로 역시 baby-gin이다. (456, 000)
• 101123은 한 개의 triplet가 존재하나, 023이 run이 아니므로 baby-gin 이 아니다.
(123을 run으로 사용하더라도 011이 run이나 triplet가 아님)

• 6자리의 숫자를 입력 받아 어떻게 Baby-gin 여부를 찾을 것인가?


완전검색!!!

♡완전 검색 방법은 문제의 해법으로 생각할 수 있는 모든 경우의 수를 나열해보고
확인하는 기법이다.

♡ Brute-force 혹은 generate-and-test 기법이라고도 불리 운다.

♡ 모든 경우의 수를 테스트한 후, 최종 해법을 도출한다.

♡ 일반적으로 경우의 수가 상대적으로 작을 때 유용하다.

♡ 모든 경우의 수를 생성하고 테스트하기 때문에 수행 속도는 느리지만, 해답을
찾아내지 못할 확률이 작다.

♡ 자격검정평가 등에서 주어진 문제를 풀 때, 우선 완전 검색으로 접근하여 해답을
도출한 후, 성능 개선을 위해 다른 알고리즘을 사용하고 해답을 확인하는 것이
바람직하다.

완전 검색을 활용해서 베이비진 접근

고려할 수 있는 모든 경우의 수 생성하기
• 6개의 숫자로 만들 수 있는 모든 숫자 나열 (중복 포함)
• 예) 입력으로 [2, 3, 5, 7,7,7]을 받았을 경우, 아래와 같이 순열을 생성할 수 있다.


235777
237577
237757
...
777532

이렇게 모든 경우의 순열 나열

해답 테스트하기

• 앞의 3자리와 뒤의 3자리를 잘라, run와 triplet 여부를 테스트하고 최종적으로 baby-gin을 판단한다.
예) 235777 >> 베이비진 아님. 235 연속되지 않으니까
해당없음 triplete


순열을 어떻게 생성할 것인가

♡ 순열 (Permutation)

• 서로 다른 것들 중 몇 개를 뽑아서 한 줄로 나열하는 것
• 서로 다른 n개 중 r개를 택하는 순열은 아래와 같이 표현한다.

nPr

• 그리고 nPr은 다음과 같은 식이 성립한다.

nPr = n * (n-1) * (n-2) * ... * (n-r+1)

• nPn = n!이라고 표기하며 Factorial이라 부른다.

n! = n * (n-1) * (n-2) * ... * 2 * 1


단순하게 순열을 생성하는 방법

♡ 예) {1, 2, 3}을 포함하는 모든 순열을 생성하는 함수
• 동일한 숫자가 포함되지 않았을 때, 각 자리 수 별로 loop을 이용해 아래와 같이
구현할 수 있다.

for i1 in range(1, 4):
	for i2 in range(1, 4):
		if i2 != i1 :
			for i3 in range(1, 4):
				if i3 != i1 and i3 != i2 :
					print(i1, i2, i3)

돌리면 
1 2 3
1 3 2
2 1 3
2 3 1
3 1 2
3 2 1
이렇게 나옴

리스트가 [2, 3, 7] 이라면? 인덱스 수가 3이니까

arr = [2, 3, 7]	# arr = [[237], 273 ,,,

for i1 in range(3):
    for i2 in range(3):
        if i1 != i2:
            for i3 in range(3):
                if i1 != i3 and i2 != i3:
                    print(arr[i1], arr[i2], arr[i3])


탐욕 알고리즘(=탐욕 그리기, 탐욕 기법 ,,,)

♡ 탐욕 알고리즘은 최적해를 구하는 데 사용되는 근시안적인 방법

♡ 여러 경우 중 하나를 결정해야 할 때마다 그 순간에 최적이라고 생각되는 것을
선택해 나가는 방식으로 진행하여 최종적인 해답에 도달한다.

♡ 각 선택의 시점에서 이루어지는 결정은 지역적으로는 최적이지만,
그 선택들을 계속 수집하여 최종적인 해답을 만들었다고 하여, 그것이 최적이라는
보장은 없다.

♡ 일반적으로, 머릿속에 떠오르는 생각을 검증 없이 바로 구현하면 Greedy 접근이
된다.

탐욕 알고리즘 동작 과정

♡ 1) 해 선택 : 현재 상태에서 부분 문제의 최적 해를 구한 뒤, 이를 부분해
집합(Solution Set)에 추가한다.

♡ 2) 실행 가능성 검사 : 새로운 부분해 집합이 실행 가능한지를 확인한다.
곧, 문제의 제약 조건을 위반하지 않는지를 검사한다.

♡ 3) 해 검사 : 새로운 부분해 집합이 문제의 해가 되는지를 확인한다.
아직 전체 문제의 해가 완성되지 않았다면 1)의 해 선택부터 다시 시작한다.


♡ 탐욕 알고리즘 예

 거스름돈 줄이기
• "어떻게 하면 손님에게 거스름돈으로 주는 지폐와 동전의 개수를 최소한으로
줄일 수 있을까?"

• 1) 해 선택 : 여기에서는 멀리 내다볼 것 없이 가장 좋은 해를 선택한다. 단위가
큰 동전으로만 거스름돈을 만들면 동전의 개수가 줄어들므로 현재 고를 수
있는 가장 단위가 큰 동전을 하나 골라 거스름돈에 추가한다.


♡ 거스름돈 줄이기
• 2) 실행 가능성 검사 : 거스름돈이 손님에게 내드려야 할 액수를 초과하는지
확인한다. 초과한다면 마지막에 추가한 동전을 거스름돈에서 빼고, 1)로
돌아가서 현재보다 한 단계 작은 단위의 동전을 추가한다.

• 3) 해 검사 : 거스름돈 문제의 해는 당연히 거스름돈이 손님에게 내드려야
하는 액수와 일치하는 셈이다. 더 드려도, 덜 드려도 안되기 때문에
거스름돈을 확인해서 액수에 모자라면 다시 1)로 돌아가서 거스름돈에
추가할 동전을 고른다.


탐욕 알고리즘 풀이

♡ Baby-gin을 완전검색 아닌 방법으로 풀어보자.
• 6개의 숫자는 6자리의 정수 값으로 입력된다.
• counts 배열의 각 원소를 체크하여 run과 triplet 및 baby-gin 여부를 판단한다.

탐욕 알고리즘 예

♡ 풀이

DATA= list(map(int, input())

위의 말 뜻 : 하나씩 처리해줘. 인풋은 순서 구분이 되어있기 때문에(인덱스접근 가능 = 이터러블) 각각을 인티저로 변환하고, 리스트로 저장 할께. 

COUNTS = [0] * 10
for i in DATA:
COUNTS[x] += 1


ex) 444345

	1 2 3 1 4 5 6 7 8 9 0
	     1 4 1

런 조사 후 런 데이터 완전 삭제

	1 2 3 1 4 5 6 7 8 9 0
	     0 3 0			<=baby gin

탐욕적 접근 될까?

ex) 333456
	1 2 3 1 4 5 6 7 8 9 0
	     3	1 1 1

런 조사 후 런 데이터 완전 삭제?

	1 2 3 1 4 5 6 7 8 9 0
	     2 0 0 1


3이상이니???
3이상이니???
3이상이니???
응응 >> 0
아니 >> 1
다 찾으면 끝.


구현 예 <많이 사용하는 코드>

num = 456789 # Baby Gin 확인할 6자리 수
c = [0] * 12 # 6자리 수로부터 각 자리 수를 추출하여 개수를 누적할 리스트 (c는 count)

for i in range(6) :
c[num % 10] += 1	#10으로 나눈 나머지 연산 = 1의 자리수를 알아내는 연산법, 1의 자리를 제거하는 연산.
num //= 10


그니깐,,
456789
나누기 10을 하면,,, 9가 남음
9 제거.
45678
나누기 10을 하면,,, 8이 남음
8제거
4567
456
45
4

6번 시행

코드로 ㄱㄱ
-----------------------------------------------------------------------------------------------------

i = 0 		#트리플 개수를 0으로

while i < 10 :	
if c[i] >= 3 : 	# triplete 조사 후 데이터 삭제 (eg. 3 이상이니?)
c[i] -= 3
tri += 1
continue;		# 그 자리부터 다시. tri =2 도 가능. 즉 어떤 자리에 입력숫자가 같으면 (444444) 4 카운트에 6이 적힘
그자리에 런, 그리고 트리플릿 있니? 도 봐야함.

왜 +2야???
구간 나눠서 if문 쪼개야 하는데, 더미로 +2 더 만들어 놓으면 어짜피 0이기 때문에 안쪼개도 됨.
그래서 2칸 더 만들어 놓은 것임.

if c[i] >= 1 and c[i+1] >= 1 and c[i+2] >= 1 : # run 조사 후 데이터 삭제
c[i] -= 1
c[i+1] -= 1
c[i+2] -= 1
run += 1
continue
i += 1

if run + tri == 2 : print("Baby Gin")
else : print("Lose")

---------------------------------------------------------------------------------------------------------


자주 실수하는 오답

♡ 입력받은 숫자를 정렬한 후, 앞뒤 3자리씩 끊어서 run 및 triplet을 확인하는
방법을 고려할 수도 있다.
• 예) [6, 4, 4, 5, 4, 4]
• 정렬하여 [4, 4, 4, 4, 5, 6]을 얻어내면 쉽게 baby-gin을 확인할 수 있다.
• 예) [1, 2, 3, 1, 2, 3]
• 정렬하면 [1,1, 2, 2, 3, 3]로서, 오히려 baby-gin 확인을 실패할 수 있다.
(# 안된다고 뜸. 런이 2번 떠서 확인안됨)

○ 위의 예처럼, 탐욕 알고리즘적인 접근은 해답을 찾아내지 못하는 경우도 있의
유의해야 한다.


------------------------------------------------------------------

#num = 456789
num = int(input())
c = [0] * 12        #c[10], c[11]은 항상 0, run확인을 위한 여분

for _ in range(6):  # 단순 반복 6회
    c[num%10]       # num%10 1의 자리 알아내기
    num //= 10      # num의 1의 자리 제거

i = 0
tri = run = 0
while i < 10:       # 10미만 까지. 카드 번호가 9까지니깐
    if c[i] >= 3:   # tri. 확인
        c[i] -= 3
        tri += 1
        continue

    if c[i] >= 1 and c[i+1]>=1 and c[i+2]>=1:
        c[i] -= 1
        c[i + 1] -= 1
        c[i + 2] -= 1
        run += 1
        continue
    i += 1          #옆자리 이동

if run+tri ==2:
    print('win')
else:
    print('lose')
----------------------------------------------------------------------------


카운팅 정렬 1단계가 제일 중요함.
구현 예 확인하기.

탐욕알고리즘과 기본적 알고리즘 차이 비교하기.







----------------------------------------------------------------------------
리뷰

	0. 2월 방향 설정

취업 > 직무 > 규모(급여)


서류 지원하는 곳이 많아야 함.(냅다 지원!)

2월 >> 자격증
- 어학 im1 이상 필수.
- 정처기(규모 작은경우. SI / 공기업 / 은행 등) >> 서류 가능 범위 늘리기
- 빅분기 , adsp, sqld 필수x , sqlp는 쳐줌,,, 

3대 압박
1. 성적
2. 전공
3. 공백기 << 자격증으로 메꿈(2주로 컷 하고 몇개월동안 공부했다. ..)

개발 / 알고리즘 먼저.
어학 점수 높이기는 방학때!



	1. 카운팅 정렬(계수정렬)

비교표기법은 스케일만파악하므로 n^2등으로 표기
카운팅정렬 O(n+k)

n은 데이터의 사이즈
n만큼 순회함.

count 후 count한 수는 k

둘 중 더 큰것을 기준으로 함.


	2. 카운팅정렬과정
1.이름
2.시간복잡도
3.안정/불안정정렬

** 누적합하는이유?

카운팅정렬은 안정정렬이어야함.
누적합은 끝의 인덱스를 가리킴.
끝자리는 뒤에서 발견해야하기때문에 역순으로 돈다.

DATA = [0, 4, 1, 3, 1, 2, 4, 1]

	3.카운팅 정렬 알고리즘
개념 / 구현에 방점.
개념이해 먼저하기.
외우려고하지마(면접/시험직전에 암기)

	4. 정렬 알고리즘 비교
알고리즘 평균수행시간 최악수행시간

	cf. log
1~100
선형적 접근 ,,, 100번째에 앎. O(N)

N=2^log2의N

	5. 탐욕 알고리즘
코테 준비 시 우선순위 낮음. 너무 어렵기 때문. 구현보다는 수학증명에 가까워.
직관 사용

근시안 적으로 봤을 때 이득인 방향으로 가고있으니(local)


부분해가 전체의 최적해가 되어야 함.

	
	6. 제일 중요한 것! 반드시 알기

순열 3중포문 돌기.p63
-------------------------------------------------------------------------------------------------
단순하게 순열을 생성하는 방법

♡ 예) {1, 2, 3}을 포함하는 모든 순열을 생성하는 함수
• 동일한 숫자가 포함되지 않았을 때, 각 자리 수 별로 loop을 이용해 아래와 같이
구현할 수 있다.

for i1 in range(1, 4):
	for i2 in range(1, 4):
		if i2 != i1 :
			for i3 in range(1, 4):
				if i3 != i1 and i3 != i2 :
					print(i1, i2, i3)

-------------------------------------------------------------------------------------------------

	7. baby gin


i = 0
tri = run = 0
while i < 10:       # 10미만 까지. 카드 번호가 9까지니깐
    if c[i] >= 3:   # tri. 확인
        c[i] -= 3
        tri += 1
        continue

    if c[i] >= 1 and c[i+1]>=1 and c[i+2]>=1:
        c[i] -= 1
        c[i + 1] -= 1
        c[i + 2] -= 1
        run += 1
        continue
    i += 1          #옆자리 이동

if run+tri ==2:
    print('win')
else:
    print('lose')


6개
run , 트리플렛 2개 이상 나오면 babygin

run tri
2	0	# run은 어떤 케이스가 와도 문제 x
1	1	#  
0	2	# 

1 2 3 4 5 6 7 8 9 
-1-1-1

떨어져있어도 문제 x
겹쳐도 문제 x
이어져있어도 문제 x

0 2 도 문제 x

1 1 이 문제야

4 1 1 # 트리플먼저하고 뺀 뒤 런 / 런 먼저 하고 3 0 0 상관없음
	# (문제인 경우는 붙어있을 때
	# 3 1 1 인 경우,,,	런 하면
	# 2 0 0 1...)

1 4 1
1 1 4


* 케이스 나누기
* 문제 되는 케이스 있는지 확인해야함. 그다음에 기법써야함.
* 런 먼저 할지 트리플 먼저할지 ,,, 설계.

케이스분류 어떻게 해?
전체 케이스 있을 때
모든 변수를 아우를 수 있도록 케이스 나눠서
경우의 수 찾기를 해야함



*** 반드시 숙지하기!

 int형 자료에서
숫자 한 자리씩 뽑아내기(p64)

삼중포문수열출력 (p.73),
(면접 /시험 많이나옴)

베이비진 경우의수 체크해보기

* 과제:
1206, 1208 반드시 풀기!

1206, 1208 1945, 23232, (23231)




뭘 입력받지? > 연속된 숫자값(ex: 231546)을 받는군

 * baby-gin임을 판단
	- data : input 끊어 쓴 data, 
		   baby-gin을 판단하기 좋은 data로 가공 , 2 변수
	- logic : baby-gin 판단
			ㄱ. run / triplet을 판단 ??! (런판단, 발견하면 내비두지말고 빼야함)
				> 발견하면 그것을 빼주기
				> 케이스분류 후 우선순위 판단(런 먼저? 트리플먼저? 순서상관없나?)


			




뭘 출력하지? > baby-gin / lose > 상태값에 따라 바뀌겠군 > 분기


































	





	